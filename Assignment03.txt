DSA Section:-------------------------------------------------------------

Q1:Leetcode 907(Subarray Minimum Subarray sum)
Logic:
Solved using the the concept of monotonic stack in O(n) time complexity by calculating the the count of Minimum elemnts in each subarray.

code:
class Solution {
public:
    vector<int> findNSE(vector<int>& arr) {
        int n = arr.size();
        vector<int> temp(n, 0);
        stack<int> st;

        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            temp[i] = st.empty() ? n : st.top();
            st.push(i);
        }
        return temp;
    }

    vector<int> findPSEE(vector<int>& arr) {
        int n = arr.size();
        vector<int> temp(n, 0);
        stack<int> st;

        for (int i = 0; i < n; i++) {
            while (!st.empty() && arr[st.top()] > arr[i]) {
                st.pop();
            }
            temp[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        return temp;
    }

    int sumSubarrayMins(vector<int>& arr) {
        // code here
        vector<int> nse = findNSE(arr);
        vector<int> psee = findPSEE(arr);
        long long ans = 0;
        long long mod = 1e9 + 7;

        for (int i = 0; i < arr.size(); i++) {
            long long left = i - psee[i];
            long long right = nse[i] - i;
            ans = (ans + (arr[i] * left * right) % mod) % mod;
        }
        return ans;
    }
};

Q2:Leetcode 503 (Next greater element)
Logic:
Solved using the concept of monotonic stack iin  o(n) time complexity.

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
       int n = nums.size();
        vector<int> ans(n, -1);  
        stack<int> stk;

        for (int i = 2*n-1;i>=0;i--) {
            while (!stk.empty() && stk.top()<=nums[i%n]) {
                stk.pop();
            }
            if (i < n) {
                ans[i]=stk.empty()?-1:stk.top();
               
            }
             stk.push(nums[i%n]);
        }
        
        return ans;
    }
};

Q3:GFG  (Root to leaf path)

Logic:
simple traversal through each nodes and adding to vector and pushing the vector in result vector 

class Solution{
 private:
     void traversal( Node* root , vector<vector<int>>&result, vector<int>&ans){
   
         if(root==NULL){
             return;
         }
         
        ans.push_back(root->data);
        
        if(root->left==NULL && root->right==NULL){
             result.push_back(ans);
         }

         else{
             
             traversal(root->left,result,ans);
             traversal(root->right,result,ans);
             
         }
         
        ans.pop_back();
     }
     
  public:
    vector<vector<int>> Paths(Node* root) {
        vector<vector<int>>result;
        vector<int>ans;
        traversal(root,result,ans);
        
        
        return result;
    }
};

DBMS SECTION:------------------------------------------------------
Table: Students

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| student_id    | int     |
| student_name  | varchar |
+---------------+---------+
student_id is the primary key (column with unique values) for this table.
Each row of this table contains the ID and the name of one student in the school.
 

Table: Subjects

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| subject_name | varchar |
+--------------+---------+
subject_name is the primary key (column with unique values) for this table.
Each row of this table contains the name of one subject in the school.
 

Table: Examinations

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| student_id   | int     |
| subject_name | varchar |
+--------------+---------+
There is no primary key (column with unique values) for this table. It may contain duplicates.
Each student from the Students table takes every course from the Subjects table.
Each row of this table indicates that a student with ID student_id attended the exam of subject_name.
 

Write a solution to find the number of times each student attended each exam.

Return the result table ordered by student_id and subject_name.

The result format is in the following example.

 

Example 1:

Input: 
Students table:
+------------+--------------+
| student_id | student_name |
+------------+--------------+
| 1          | Alice        |
| 2          | Bob          |
| 13         | John         |
| 6          | Alex         |
+------------+--------------+
Subjects table:
+--------------+
| subject_name |
+--------------+
| Math         |
| Physics      |
| Programming  |
+--------------+
Examinations table:
+------------+--------------+
| student_id | subject_name |
+------------+--------------+
| 1          | Math         |
| 1          | Physics      |
| 1          | Programming  |
| 2          | Programming  |
| 1          | Physics      |
| 1          | Math         |
| 13         | Math         |
| 13         | Programming  |
| 13         | Physics      |
| 2          | Math         |
| 1          | Math         |
+------------+--------------+
Output: 
+------------+--------------+--------------+----------------+
| student_id | student_name | subject_name | attended_exams |
+------------+--------------+--------------+----------------+
| 1          | Alice        | Math         | 3              |
| 1          | Alice        | Physics      | 2              |
| 1          | Alice        | Programming  | 1              |
| 2          | Bob          | Math         | 1              |
| 2          | Bob          | Physics      | 0              |
| 2          | Bob          | Programming  | 1              |
| 6          | Alex         | Math         | 0              |
| 6          | Alex         | Physics      | 0              |
| 6          | Alex         | Programming  | 0              |
| 13         | John         | Math         | 1              |
| 13         | John         | Physics      | 1              |
| 13         | John         | Programming  | 1              |
+------------+--------------+--------------+----------------+
Explanation: 
The result table should contain all students and all subjects.
Alice attended the Math exam 3 times, the Physics exam 2 times, and the Programming exam 1 time.
Bob attended the Math exam 1 time, the Programming exam 1 time, and did not attend the Physics exam.
Alex did not attend any exams.
John attended the Math exam 1 time, the Physics exam 1 time, and the Programming exam 1 time.



solution:
SELECT 
    st.student_id,
    st.student_name,
    subj.subject_name,
    COUNT(exam.student_id) AS attended_exams
FROM 
    Students as st
CROSS JOIN 
    Subjects as subj
LEFT JOIN 
    Examinations as exam
ON 
    st.student_id = exam.student_id
    AND subj.subject_name = exam.subject_name
GROUP BY 
    st.student_id, 
    st.student_name, 
    subj.subject_name
ORDER BY 
    st.student_id 
  ;
