DSA Section:-------------------------------------------------------------

Q1:Leetcode 101 (Symmetric Tree)
Logic:
Just used the concept of preorder traversal and comare the values of left->right to the right->left .To implementing the logic used helping function which simultaneosly comare left and right nodes. 

code:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
private:
    bool solve(TreeNode* left, TreeNode* right) {
        if (left == NULL || right == NULL) {
            return left == right;
        }
        if (left->val != right->val)
            return false;
        return solve(left->left, right->right) &&
               solve(left->right, right->left);
    }

public:
    bool isSymmetric(TreeNode* root) {
        return (root == NULL || solve(root->left, root->right));
    }
};

Q2:Leetcode 1773 (Count Matching)
Logic:
Simply traverse each item in items and according to the condition given in the question implement the solution .

class Solution {
public:
    int countMatches(vector<vector<string>>& items, string ruleKey, string ruleValue) {
        int count=0;
        for(auto item:items){
            for(int i=0;i<3;i++){
              if(ruleKey == "type" && ruleValue == item[0] ){
                count++;
                break;
              }
              else if(ruleKey == "color" && ruleValue == item[1]){
                count++;
                break;
              }
              else if(ruleKey == "name" && ruleValue == item[2]){
                count++;
                break;
              }
                
            }
        }
        return count;
        
    }
};


Q3:Leetcode 75 (Sort Colours)
Logic:
Simply sort the colors , without using in sort function ,used concept of bubble sort.

code:
cclass Solution {
public:
    void sortColors(vector<int>& nums) {
        for(int i=0;i<nums.size();i++){
            int j=i+1;
            for(int j=0;j<nums.size()-1;j++){
                if(nums[i]>nums[j]){
                    swap(nums[i],nums[j]);
                }
            }
        }
        reverse(nums.begin(),nums.end());
    }
};

DBMS SECTION:------------------------------------------------------

Leetcode(570)

Question:
Table: Employee

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
| department  | varchar |
| managerId   | int     |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table indicates the name of an employee, their department, and the id of their manager.
If managerId is null, then the employee does not have a manager.
No employee will be the manager of themself.
 

Write a solution to find managers with at least five direct reports.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Employee table:
+-----+-------+------------+-----------+
| id  | name  | department | managerId |
+-----+-------+------------+-----------+
| 101 | John  | A          | null      |
| 102 | Dan   | A          | 101       |
| 103 | James | A          | 101       |
| 104 | Amy   | A          | 101       |
| 105 | Anne  | A          | 101       |
| 106 | Ron   | B          | 101       |
+-----+-------+------------+-----------+
Output: 
+------+
| name |
+------+
| John |
+------+

Query:

SELECT e.name
FROM Employee AS e 
INNER JOIN Employee AS m ON e.id=m.managerId 
GROUP BY m.managerId 
HAVING COUNT(m.managerId) >= 5
