DSA Section:-------------------------------------------------------------

Q1:Leetcode 2102 (Sum of subarray Ranges)

code:
class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        long long sum = 0;

        for (int i = 0; i < nums.size(); i++) {
            int mini = nums[i]; 
            int maxi = nums[i]; 

            for (int j = i; j < nums.size(); j++) {
                mini = min(mini, nums[j]);
                maxi = max(maxi, nums[j]);

                sum += (maxi - mini);
            }
        }

        return sum;
    }
};

Q2:Leetcode 735 (Asteroid Collision )

code:
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        stack<int> stc;

        for (int asteroid : asteroids) {
            bool destroyed = false;

            while (!stc.empty() && asteroid < 0 && stc.top() > 0) {
                if (abs(asteroid) > stc.top()) {
                    stc.pop(); 
                } else if (abs(asteroid) == stc.top()) {
                    stc.pop(); 
                    destroyed = true;
                    break;
                } else {
                    destroyed = true; 
                    break;
                }
            }

            if (!destroyed) {
                stc.push(asteroid);
            }
        }

        vector<int> result(stc.size());
        for (int i = stc.size() - 1; i >= 0; --i) {
            result[i] = stc.top();
            stc.pop();
        }

        return result;
    }
};

Q3:Leetcode 3105 (Longest Strictly Increasing or Strictly Decreasing Subarray)
code:
class Solution {
public:
    int longestMonotonicSubarray(vector<int>& arr) {
        int n = arr.size();
        if (n == 0) return 0;

        int res = 1;
        int in = 1;
        int dec = 1;

        for (int i = 1; i < n; ++i) {
            if (arr[i] > arr[i - 1]) {
                in++;
                dec = 1;
            }
            else if (arr[i] < arr[i - 1]) {
                dec++;
                in = 1;
            }
            else {
                in = 1;
                dec = 1;
            }

            res = max(res, max(in, dec));
        }

        return res;
    }
};

DBMS SECTION:------------------------------------------------------

595. Big Countries

Table: World

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| name        | varchar |
| continent   | varchar |
| area        | int     |
| population  | int     |
| gdp         | bigint  |
+-------------+---------+
name is the primary key (column with unique values) for this table.
Each row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.
 

A country is big if:

it has an area of at least three million (i.e., 3000000 km2), or
it has a population of at least twenty-five million (i.e., 25000000).
Write a solution to find the name, population, and area of the big countries.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
World table:
+-------------+-----------+---------+------------+--------------+
| name        | continent | area    | population | gdp          |
+-------------+-----------+---------+------------+--------------+
| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |
| Albania     | Europe    | 28748   | 2831741    | 12960000000  |
| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |
| Andorra     | Europe    | 468     | 78115      | 3712000000   |
| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |
+-------------+-----------+---------+------------+--------------+
Output: 
+-------------+------------+---------+
| name        | population | area    |
+-------------+------------+---------+
| Afghanistan | 25500100   | 652230  |
| Algeria     | 37100000   | 2381741 |
+-------------+------------+---------+

Query:
# Write your MySQL query statement below
select name ,population,area from world where area>=3000000 or population>=25000000;