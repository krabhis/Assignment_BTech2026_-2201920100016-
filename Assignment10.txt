DSA Section:-------------------------------------------------------------

Q1:Leetcode 1329 (Sort diagonally)
class Solution {
public:
    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {
        map<int , vector<int>>mapi;
        int r=mat.size();
        int c=mat[0].size();
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                mapi[i-j].push_back(mat[i][j]);
            }
        }
        for(auto &it :mapi){
            sort(it.second.begin(),it.second.end());
        }
         for(int i=r-1;i>=0;i--){
            for(int j=c-1;j>=0;j--){
                mat[i][j]=mapi[i-j].back();
                mapi[i-j].pop_back();
            }
        }
return mat;

    }
};

Q2:Leetcode 3160 (Color Ball)
class Solution {
public:
    vector<int> queryResults(int limit, vector<vector<int>>& queries) {
        int n = queries.size();
        vector<int> res;
        unordered_map<int,int> colMap;
        unordered_map<int,int> revMap;
   
        for(auto querie:queries){
            int s=querie[0];
            int e=querie[1];
            int color=colMap[s];
             if(revMap.find(color)!=revMap.end()){
                revMap[color]--;
                if(revMap[color]==0) revMap.erase(color);
            }
             revMap[e]++;
            colMap[s] = e;
            res.push_back(revMap.size());

        }
        return res;

    }
};

Q.3:Leetcode(COunt Nice Pair)

class Solution {
    private:
    int rev(int num){
        string a=to_string(num);
        reverse(a.begin(),a.end());
          if(a=="0"){
            return stoi(a);
        }
        if(a[0]=='0'){
            a.erase(a.begin());
        }
      
        int ans=stoi(a);
        return ans;
    }
public:
    long long mod=1000000007;
    int countNicePairs(vector<int>& nums) {
        long long count=0;
        unordered_map<int,int>mapi;
        for(int i=0;i<nums.size();i++){
           int equ=nums[i]-rev(nums[i]);
           if(mapi.find(equ)!=mapi.end()){
              count+=mapi[equ];
           }
           mapi[equ]++;

        }
        return count%mod;
    }
};

DBMS SECTION:------------------------------------------------------
620. Not Boring Movies
Solved
Easy
Topics
Companies
SQL Schema
Pandas Schema
Table: Cinema

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| id             | int      |
| movie          | varchar  |
| description    | varchar  |
| rating         | float    |
+----------------+----------+
id is the primary key (column with unique values) for this table.
Each row contains information about the name of a movie, its genre, and its rating.
rating is a 2 decimal places float in the range [0, 10]
 

Write a solution to report the movies with an odd-numbered ID and a description that is not "boring".

Return the result table ordered by rating in descending order.

The result format is in the following example.

 

Example 1:

Input: 
Cinema table:
+----+------------+-------------+--------+
| id | movie      | description | rating |
+----+------------+-------------+--------+
| 1  | War        | great 3D    | 8.9    |
| 2  | Science    | fiction     | 8.5    |
| 3  | irish      | boring      | 6.2    |
| 4  | Ice song   | Fantacy     | 8.6    |
| 5  | House card | Interesting | 9.1    |
+----+------------+-------------+--------+
Output: 
+----+------------+-------------+--------+
| id | movie      | description | rating |
+----+------------+-------------+--------+
| 5  | House card | Interesting | 9.1    |
| 1  | War        | great 3D    | 8.9    |
+----+------------+-------------+--------+
Explanation: 
We have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.


sol:
select * from cinema where id%2!=0 and description <> 'boring' order by rating desc