DSA Section:-------------------------------------------------------------

Q1:Leetcode Count Bad Pairs
class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        int n=nums.size();
        long long tot_pairs=(1LL*n*(n-1))/2;
        unordered_map<int, int>mapi;
        for(int i=0;i<n;i++){
          int diff=nums[i]-i;
         
          if(mapi.find(diff)!=mapi.end()){
            tot_pairs-=mapi[diff];
          } 
           mapi[diff]++;
            
        }

        return tot_pairs;
    }
};
    

Q2:Leetcode 3160 (Add two numbers)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* L1 = l1;
        ListNode* L2 = l2;
        int carry = 0;
        ListNode* ans = new ListNode(-1);
        ListNode* temp = ans;

        while (L1 != nullptr && L2 != nullptr) {
            int sum = L1->val + L2->val + carry;
            int res = sum % 10;
            carry = sum / 10;
            temp->next = new ListNode(res);
            temp = temp->next;
            L1 = L1->next;
            L2 = L2->next;
        }

        while (L1 != nullptr) {
            int sum = L1->val + carry;
            int res = sum % 10;
            carry = sum / 10;
            temp->next = new ListNode(res);
            temp = temp->next;
            L1 = L1->next;
        }

        while (L2 != nullptr) {
            int sum = L2->val + carry;
            int res = sum % 10;
            carry = sum / 10;
            temp->next = new ListNode(res);
            temp = temp->next;
            L2 = L2->next;
        }

        if (carry > 0) {
            temp->next = new ListNode(carry);
        }

        ListNode* dummy = ans->next;
        delete ans;
        return dummy;
    }
};

Q.3:Leetcode(Sort LL)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* findmid(ListNode* head) {
        if (head == NULL || head->next == NULL)
            return head;

        ListNode* slow = head;
        ListNode* fast = head->next;
        while (fast != NULL && fast->next != NULL) {

            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode* merge(ListNode* left, ListNode* right) {
        if (left == NULL)
            return right;
        if (right == NULL)
            return left;
        ListNode* ans = new ListNode(-1);
        ListNode* temp = ans;
        while (left != NULL && right != NULL) {
            if (right->val > left->val) {
                temp->next=left;
                temp = left;
                left = left->next;
            } else {
                temp->next=right;
                temp = right;
                right = right->next;
            }
        }
        while (left != NULL) {
               temp->next=left;
                temp = left;
                left = left->next;
        }
        while (right != NULL) {
                temp->next=right;
                temp = right;
                right = right->next;
        }
        return ans->next;
    }

    ListNode* mergesort(ListNode* head) {

        if (head == NULL || head->next == NULL)
            return head;
        ListNode* mid = findmid(head);
        ListNode* left = head;
        ListNode* right = mid->next;
        mid->next = NULL;
        left = mergesort(left);
        right = mergesort(right);

        ListNode* result = merge(left, right);
        return result;
    }

public:
    ListNode* sortList(ListNode* head) {
        return mergesort(head);
    }
};

DBMS SECTION:------------------------------------------------------
1934. Confirmation Rate
Solved
Medium
Topics
Companies
SQL Schema
Pandas Schema
Table: Signups

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
+----------------+----------+
user_id is the column of unique values for this table.
Each row contains information about the signup time for the user with ID user_id.
 

Table: Confirmations

+----------------+----------+
| Column Name    | Type     |
+----------------+----------+
| user_id        | int      |
| time_stamp     | datetime |
| action         | ENUM     |
+----------------+----------+
(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.
user_id is a foreign key (reference column) to the Signups table.
action is an ENUM (category) of the type ('confirmed', 'timeout')
Each row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').
 

The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.

Write a solution to find the confirmation rate of each user.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Signups table:
+---------+---------------------+
| user_id | time_stamp          |
+---------+---------------------+
| 3       | 2020-03-21 10:16:13 |
| 7       | 2020-01-04 13:57:59 |
| 2       | 2020-07-29 23:09:44 |
| 6       | 2020-12-09 10:39:37 |
+---------+---------------------+
Confirmations table:
+---------+---------------------+-----------+
| user_id | time_stamp          | action    |
+---------+---------------------+-----------+
| 3       | 2021-01-06 03:30:46 | timeout   |
| 3       | 2021-07-14 14:00:00 | timeout   |
| 7       | 2021-06-12 11:57:29 | confirmed |
| 7       | 2021-06-13 12:58:28 | confirmed |
| 7       | 2021-06-14 13:59:27 | confirmed |
| 2       | 2021-01-22 00:00:00 | confirmed |
| 2       | 2021-02-28 23:59:59 | timeout   |
+---------+---------------------+-----------+
Output: 
+---------+-------------------+
| user_id | confirmation_rate |
+---------+-------------------+
| 6       | 0.00              |
| 3       | 0.00              |
| 7       | 1.00              |
| 2       | 0.50              |
+---------+-------------------+
Explanation: 
User 6 did not request any confirmation messages. The confirmation rate is 0.
User 3 made 2 requests and both timed out. The confirmation rate is 0.
User 7 made 3 requests and all were confirmed. The confirmation rate is 1.
User 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5.
sol:
# Write your MySQL query statement below
Select a.user_id ,IFNULL(Round(sum(action="confirmed")/count(*) , 2),0.00) AS confirmation_rate  from Signups as a
Left join Confirmations as b
on a.user_id=b.user_id
group by a.user_id;
